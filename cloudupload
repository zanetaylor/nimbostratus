#!/bin/sh
###############################################################################
# CONFIGURATION
###############################################################################
# shellcheck source=/home/gesis/src/nimbostratus/config
. "${HOME}/.config/nimbostratus/config"

if [ "$use_crypt" = 1 ] || [ "$use_local_crypt" = 1 ]; then
	export ENCFS6_CONFIG="${encfs_cfg}"
fi

##############################################################################

# If script is already running; abort.
if pidof -o %PPID -x "$(basename "$0")"; then
	echo "[ $(date ${date_format}) ] Upload already in progress. Aborting."
	exit 3
fi

# Generate filelist and iterate through it...
find "${local_media}" -type f |
	while read -r n; do

		# Find the pathname relative to the root of your remote and store filename
		filename="$(echo "$n" | sed -e s@"${local_media}"@@)"
		destpath="$(dirname "$n" | sed -e s@"${local_media}"@@)"

		# If we're using encryption, translate the filename to plaintext, else store filename
		if [ "$use_crypt" = 1 ] || [ "$use_local_crypt" = 1 ]; then
			name="$(encfsctl decode --extpass="${pass_cmd}" "${local_media}" "${filename}")"
		else
			name="$n"
		fi

		# Skip hidden or partial files.
		case "$name" in
			(*.partial~) continue ;;
			(*_HIDDEN~) continue ;;
			(*.QTFS) continue ;;
			(*.fuse*) continue ;;
		esac

		# If file is opened by another process, wait until it isn't.
		while [ "$(lsof 2>&1 | grep -c "$n")" -gt 0 ] || \
			[ "$(lsof 2>&1 | grep -c "${local_media}/${name}")" -gt 0 ] || \
			[ "$(lsof 2>&1 | grep -c "${plex_media_dir}/${name}")" -gt 0 ]; do
			echo "[ $(date ${date_format}) ] File -> ${name} in use. Retrying in 10 seconds."
			sleep 10
		done

		# Copy file to remote destination[s], retaining path
		if [ "$use_gdrive" = 1 ]; then
			echo "[ $(date ${date_format}) ] Transfering file -> ${name} to Google Drive."
			find "$n" -exec "${rclone_bin}" copy -c '{}' "${gd_label}:${gd_subdir}${destpath}" \; >/dev/null 2>&1 || echo "[ $(date ${date_format}) ] ERROR! Transfering file -> ${name} to Google Drive FAILED."
		fi
		if [ "$use_acd" = 1 ]; then
			echo "[ $(date ${date_format}) ] Transfering file -> ${name} to Amazon Cloud Drive."
			find "$n" -exec "${rclone_bin}" copy -c '{}' "${acd_label}:${acd_subdir}${destpath}" \; >/dev/null 2>&1 || echo "[ $(date ${date_format}) ] ERROR! Transfering file -> ${name} to Amazon Cloud Drive FAILED." 
		fi
	done

# success!
exit 0

